&ACCESS RVO
&REL 6
DEF  mxa_SysVar()
;FOLD ;%{H}
;// This material is the exclusive property of KUKA Roboter GmbH.
;// Except as expressly permitted by separate agreement, this material may only
;// be used by members of the development department of KUKA Roboter GmbH for
;// internal development purposes of KUKA Roboter GmbH.
;//
;// Copyright (C) 2013
;// KUKA Roboter GmbH, Germany. All Rights Reserved.
;
;//! 
;//! Access to various system variables
;
;//
;//*****************************************************************************
;// Datum       Programmierer        Reviewer
;//             Beschreibung
;//-----------------------------------------------------------------------------
;// 01.11.2013  AFr                  
;//             Erstellung
;// 29.07.2015  AFr                  
;//             Fehlerbehebung CRDB62988
;//*****************************************************************************
;//

   mxA_Error(gMxAErr_Internal)
END

;-----------------------------------------------------------
; Auslesen der aktuellen Achsgeschwindigkeiten
; (Ausfuehrung im Submitinterpreter)
;
GLOBAL DEFFCT INT  mxA_ReadVelAxisAct(QIdx:IN)
INT QIdx
INT i 

   for i = 1 to 12
      gMxA_CMD_DATA_RET[i] = $VEL_AXIS_ACT[i]
   endfor
   
   RETURN(0)   
ENDFCT

;-----------------------------------------------------------
; Auslesen der aktuellen kartesischen Beschleunigungen
; (Ausfuehrung im Submitinterpreter)
;
GLOBAL DEFFCT INT  mxA_ReadAccCarAct(QIdx:IN)
INT QIdx

   gMxA_CMD_DATA_RET[1] = $ACC_CAR_ACT.ABS
   gMxA_CMD_DATA_RET[2] = $ACC_CAR_ACT.X
   gMxA_CMD_DATA_RET[3] = $ACC_CAR_ACT.Y
   gMxA_CMD_DATA_RET[4] = $ACC_CAR_ACT.Z
   gMxA_CMD_DATA_RET[5] = $ACC_CAR_ACT.A
   gMxA_CMD_DATA_RET[6] = $ACC_CAR_ACT.B
   gMxA_CMD_DATA_RET[7] = $ACC_CAR_ACT.C

   RETURN(0)   
ENDFCT

;-----------------------------------------------------------
; Auslesen einer Systemvariablen 
; (Ausfuehrung im Submitinterpreter)
;
GLOBAL DEFFCT INT  mxA_ReadSysVar(QIdx:IN)
INT QIdx
INT Factor ;Faktor fuer die Uebermittlung als Ganzzahl
INT nErrCode
E6POS tmpPOS   
;FOLD USER VARSREADSYSVAR
;ENDFOLD (USER VARSREADSYSVAR)
      
   ;ggf. vorhandene Fehler loeschen
   ERR_CLEAR($ERR)
   
   ;Systemvariable einlesen
   switch gMxA_CmdQ_Int1[QIdx]
   case 1 ;$ADVANCE
      Factor = 1
      gMxA_CMD_DATA_RET[1] = $ADVANCE
   case 2 ;$POS_FOR
      ON_ERROR_PROCEED
      tmpPOS = $POS_FOR
      if $ERR.NUMBER == 0 then
         gMxA_CMD_DATA_RET[1] = tmpPOS.X 
         gMxA_CMD_DATA_RET[2] = tmpPOS.Y 
         gMxA_CMD_DATA_RET[3] = tmpPOS.Z 
         gMxA_CMD_DATA_RET[4] = tmpPOS.A 
         gMxA_CMD_DATA_RET[5] = tmpPOS.B 
         gMxA_CMD_DATA_RET[6] = tmpPOS.C 
         gMxA_CMD_DATA_RET[7] = tmpPOS.S 
         gMxA_CMD_DATA_RET[8] = tmpPOS.T 
      endif
   case 3 ;$POS_FOR
      ON_ERROR_PROCEED
      tmpPOS = $POS_FOR
      if $ERR.NUMBER == 0 then
         gMxA_CMD_DATA_RET[1] = tmpPOS.E1 
         gMxA_CMD_DATA_RET[2] = tmpPOS.E2 
         gMxA_CMD_DATA_RET[3] = tmpPOS.E3 
         gMxA_CMD_DATA_RET[4] = tmpPOS.E4 
         gMxA_CMD_DATA_RET[5] = tmpPOS.E5 
         gMxA_CMD_DATA_RET[6] = tmpPOS.E6 
      endif
   ;FOLD USER READSYSVAR
   ;ENDFOLD (USER READSYSVAR)
   default
      ;Systemvariable nicht definiert
      nErrCode = mxA_ErrorSub(gMxAErrSub_InvSysVarIdx)
      RETURN(nErrCode)
   endswitch
   
   if $ERR.NUMBER > 0 then
      ERR_CLEAR($ERR)
      ;Fehler beim Lesen der Systemvariable
      ;Systemvariable vermutlich nicht initialisiert
      nErrCode = mxA_ErrorSub(gMxAErrSub_SysVarNoInit)
      RETURN(nErrCode)
   endif

   RETURN(0)
ENDFCT

;-----------------------------------------------------------
; Schreiben einer Systemvariablen 
; (Ausfuehrung im Submit- oder Roboterinterpreter)
;
GLOBAL DEFFCT INT  mxA_WriteSysVar(QIdx:IN)
INT QIdx
INT nErrCode
INT nIndex
REAL Values[10]
INT nAdvance
BOOL bContinue
;FOLD USER VARSWRITESYSVAR
INT control_mode
DECL STATE_T StmtState
DECL MODUS_T CmdMode
CmdMode = #SYNC
;ENDFOLD (USER VARSWRITESYSVAR)
   
   ;Werte einlesen
   bContinue = GetContinue(QIdx)
   nErrCode = GetValues(QIdx,nIndex,Values[])
   if nErrCode <> 0 then
      RETURN(nErrCode)
   endif
   
   ;Trace
   mxA_TraceVal_MS("WRITE SYS VAR",QIdx,Values[])
      
   ;ggf. vorhandene Fehler loeschen
   ERR_CLEAR($ERR)
MsgNotify("XXXWriteSysVar")
   ;Systemvariable schreiben
   switch nIndex
   case 1 ;$ADVANCE
      ON_ERROR_PROCEED
      nAdvance = Values[1]
      ;Berg add @ 2018-10-16 for "sps crashed when change Advance through mode 0"(CRDB00066330.02)
      ;system variable 'advance' is not allowed to be modified from sps even without mxA
      ON_ERROR_PROCEED
      $ADVANCE = nAdvance
   ;FOLD USER WRITESYSVAR
    case 4
       control_mode = Values[4]
       SWITCH control_mode
          CASE 0
             CWRITE($CMD,StmtState,CmdMode,"CANCEL 1")
          CASE 1
             rsi_joint_pos()
          DEFAULT
       ENDSWITCH
   ;ENDFOLD (USER WRITESYSVAR)
   default
      ;Systemvariable nicht definiert
      if gMxA_CmdQ_SubmitExe[QIdx] then
         nErrCode = mxA_ErrorSub(gMxAErrSub_InvSysVarIdx)
         RETURN(nErrCode)
      else
         mxA_Error(gMxAErr_InvSysVarIdx)      
      endif
   endswitch

   if $ERR.NUMBER > 0 then
      ERR_CLEAR($ERR)
      ;Fehler beim Schreiben der Systemvariable
      if gMxA_CmdQ_SubmitExe[QIdx] then
         nErrCode = mxA_ErrorSub(gMxAErrSub_InvSysVarVal)
         RETURN(nErrCode)
      else
         mxA_Error(gMxAErr_InvSysVarVal)      
      endif      
   endif

   ;Rueckmeldung Funktion ausgefuehrt
   if gMxA_CmdQ_BuffMode[QIdx] <> #Direct then
      mxA_MsgMan_SetCmdStateM(QIdx,#Executed);Funktion wurde ausgefuehrt                   
   endif

   RETURN(0)
ENDFCT

;---------------------------------
; Parameterueberpruefung
; (Ausfuehrung im Submit)
;
GLOBAL DEFFCT INT mxA_WSysVar_CheckPar(QIdx:IN)
INT QIdx
INT nErrCode
INT nIndex
REAL Values[10]
   
   nErrCode = GetValues(QIdx,nIndex,Values[])
   RETURN(nErrCode)
ENDFCT


;---------------------------------
; Einlesen der Funktionsparameter
;
DEFFCT BOOL GetContinue(QIdx:IN)
INT QIdx
BOOL bContinue
   
   bContinue = gMxA_CmdQ_Bool1[QIdx]

   RETURN(bContinue)
ENDFCT

DEFFCT INT GetValues(QIdx:IN,nIndex:OUT,Values:OUT)
INT QIdx
INT nIndex
REAL Values[]
INT nErrCode
BOOL bValuesOK
BOOL bSysVarNotWriteable   
;FOLD USER VARSGETVALUES
;ENDFOLD (USER VARSGETVALUES)
   
   ;Initialisierung
   bValuesOK = FALSE
   bSysVarNotWriteable = FALSE
   
   ;Einlesen der Werte aus der Queue 
   nIndex = gMxA_CmdQ_Int1[QIdx]   
   Values[1] = gMxA_CmdQ_Real1[QIdx]
   Values[2] = gMxA_CmdQ_Real2[QIdx]
   Values[3] = gMxA_CmdQ_Real3[QIdx]
   Values[4] = gMxA_CmdQ_Real4[QIdx]
   Values[5] = gMxA_CmdQ_Real5[QIdx]
   Values[6] = gMxA_CmdQ_Real6[QIdx]
   Values[7] = gMxA_CmdQ_Real7[QIdx]
   Values[8] = gMxA_CmdQ_Real8[QIdx]
   Values[9] = gMxA_CmdQ_Real9[QIdx]
   Values[10] = gMxA_CmdQ_Real10[QIdx]
   
   switch nIndex
   case 1 ; $ADVANCE
      if (Values[1] >= 0) and (Values[1] <= 5) then
         bValuesOK = TRUE
      endif
   case 2,3 ; $POS_INT
      bSysVarNotWriteable = TRUE
   ;FOLD USER GETVALUES
    case 4
      bSysVarNotWriteable = FALSE
      bValuesOK = TRUE
   ;ENDFOLD (USER GETVALUES)
   default
      ;Systemvariable nicht definiert
      if gMxA_CmdQ_SubmitExe[QIdx] then
         nErrCode = mxA_ErrorSub(gMxAErrSub_InvSysVarIdx)
         RETURN(nErrCode)
      else
         mxA_Error(gMxAErr_InvSysVarIdx)      
      endif
   endswitch

   if bSysVarNotWriteable then
      ;Systemvariable darf nicht beschrieben werden (ReadOnly)
      if gMxA_CmdQ_SubmitExe[QIdx] then
         nErrCode = mxA_ErrorSub(gMxAErrSub_SysVarRO)
         RETURN(nErrCode)
      else
         mxA_Error(gMxAErr_SysVarRO)      
      endif      
   endif      

   if bValuesOK == FALSE then
      ;Parameterwerte ungueltig
      if gMxA_CmdQ_SubmitExe[QIdx] then
         nErrCode = mxA_ErrorSub(gMxAErrSub_InvSysVarVal)
         RETURN(nErrCode)
      else
         mxA_Error(gMxAErr_InvSysVarVal)      
      endif      
   endif      
   
   RETURN(0)
ENDFCT
;ENDFOLD
