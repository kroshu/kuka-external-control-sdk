&ACCESS R
DEF status()
    ; Software License Agreement (BSD License)
    ;
    ; Copyright (c) 2025, KUKA Hungaria Kft.
    ; All rights reserved.
    ;
    ; Redistribution and use in source and binary forms, with or without
    ; modification, are permitted provided that the following conditions are met:
    ;
    ;      * Redistributions of source code must retain the above copyright
    ;        notice, this list of conditions and the following disclaimer.
    ;      * Redistributions in binary form must reproduce the above copyright
    ;        notice, this list of conditions and the following disclaimer in the
    ;        documentation and/or other materials provided with the distribution.
    ;      * Neither the name of the copyright holder, nor the names of its
    ;        contributors may be used to endorse or promote products derived
    ;        from this software without specific prior written permission.
    ;
    ; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    ; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    ; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
    ; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
    ; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
    ; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
    ; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
    ; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
    ; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
    ; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
    ; POSSIBILITY OF SUCH DAMAGE.
END

GLOBAL DEF ROS_UpdateStatus()
    BOOL should_update
    should_update = FALSE

    IF ROS_GetSelControlMode() <> control_mode THEN
        control_mode = ROS_GetSelControlMode()
        should_update = TRUE
    ENDIF

    IF ROS_GetSelCycTime() <> cycle_time THEN
        cycle_time = ROS_GetSelCycTime()
        should_update = TRUE
    ENDIF

    IF $PERI_RDY <> drives_powered THEN
        drives_powered = $PERI_RDY
        should_update = TRUE
    ENDIF

    IF (NOT $ALARM_STOP OR NOT $ALARM_STOP_INTERN) <> emergency_stop THEN
        emergency_stop = NOT $ALARM_STOP OR NOT $ALARM_STOP_INTERN
        should_update = TRUE
    ENDIF

    IF (NOT $USER_SAF) <> guard_stop THEN
        guard_stop = NOT $USER_SAF
        should_update = TRUE
    ENDIF

    IF $PRO_MOVE <> in_motion THEN
        in_motion = $PRO_MOVE
        should_update = TRUE
    ENDIF

    IF ($COULD_START_MOTION AND $PRO_ACT) <> motion_possible THEN
        motion_possible = $COULD_START_MOTION AND $PRO_ACT
        should_update = TRUE
    ENDIF

    IF ROS_OperationModeToInt() <> operation_mode THEN
        operation_mode = ROS_OperationModeToInt()
        should_update = TRUE
    ENDIF

    IF $STOPMESS <> robot_stopped THEN
        robot_stopped = $STOPMESS
        should_update = TRUE
    ENDIF

    IF should_update OR first_update THEN
        ROS_WriteStatus()
        ROS_Debug("Status updated")
        ROS_SetLastEvent(#STATUS_UPDATED)
        first_update = FALSE
    ENDIF
END

GLOBAL DEF ROS_ResetStatus()
    first_update = TRUE
END

GLOBAL DEF ROS_WriteStatus()
    DECL EKI_STATUS ret
    ret = EKI_SetInt(INTERFACE_NAME[], "Robot/Status/@ControlMode", ROS_ControlModeToInt(control_mode))
    ret = EKI_SetInt(INTERFACE_NAME[], "Robot/Status/@CycleTime", ROS_CycleTimeToInt(cycle_time))
    ret = EKI_SetInt(INTERFACE_NAME[], "Robot/Status/@DrivesPowered", ROS_BoolToInt(drives_powered))
    ret = EKI_SetInt(INTERFACE_NAME[], "Robot/Status/@EmergencyStop", ROS_BoolToInt(emergency_stop))
    ret = EKI_SetInt(INTERFACE_NAME[], "Robot/Status/@GuardStop", ROS_BoolToInt(guard_stop))
    ret = EKI_SetInt(INTERFACE_NAME[], "Robot/Status/@InMotion", ROS_BoolToInt(in_motion))
    ret = EKI_SetInt(INTERFACE_NAME[], "Robot/Status/@MotionPossible", ROS_BoolToInt(motion_possible))
    ret = EKI_SetInt(INTERFACE_NAME[], "Robot/Status/@OperationMode", operation_mode)
    ret = EKI_SetInt(INTERFACE_NAME[], "Robot/Status/@RobotStopped", ROS_BoolToInt(robot_stopped))
END
