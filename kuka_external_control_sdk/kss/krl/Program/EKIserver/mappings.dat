&ACCESS R
DEFDAT mappings PUBLIC
    ; FOLD Custom structure types
    STRUC AxisTypeTuple INT axis_type_int, CHAR axis_type_string[32]
    STRUC ControlModeTuple ControlMode control_mode, CHAR control_mode_string[32], INT control_mode_int
    STRUC CycleTimeTuple ROS_CycleTime cycle_time, CHAR cycle_time_string[32], INT cycle_time_int
    STRUC DriverStateTuple DriverState driver_state, CHAR driver_state_string[32]
    STRUC ProgramConfiguration ControlMode control_mode, ROS_CycleTime cycle_time, CHAR program[64]
    ; ENDFOLD

    ; FOLD Constants for mapping axis type integers to strings and vice versa
    CONST INT AXIS_TYPE_COUNT = 3
    DECL CONST AxisTypeTuple AXIS_TYPE_TUPLES[3]
    AXIS_TYPE_TUPLES[1] = { axis_type_int 1, axis_type_string[] "LINEAR" }
    AXIS_TYPE_TUPLES[2] = { axis_type_int 3, axis_type_string[] "ROTATIONAL" }
    AXIS_TYPE_TUPLES[3] = { axis_type_int 5, axis_type_string[] "ENDLESS" }
    ; ENDFOLD

    ; FOLD Constants for mapping commands
    DECL CONST CommandType COMMAND_TYPES[9]
    COMMAND_TYPES[1] = #CMD_CON
    COMMAND_TYPES[2] = #CMD_START
    COMMAND_TYPES[3] = #CMD_RESET
    COMMAND_TYPES[4] = #CMD_CANCEL
    COMMAND_TYPES[5] = #CMD_CHANGE
    COMMAND_TYPES[6] = #CMD_NONE
    COMMAND_TYPES[7] = #CMD_DRIVES_ON
    COMMAND_TYPES[8] = #CMD_DRIVES_OFF
    COMMAND_TYPES[9] = #CMD_CHANGE_CYCLE_TIME
    ; ENDFOLD

    ; FOLD Constants for mapping control modes to strings/integers and vice versa
    DECL CONST ControlModeTuple CONTROL_MODE_TUPLES[3]
    CONTROL_MODE_TUPLES[1] = { control_mode #INACTIVE, control_mode_string[] "Inactive Control", control_mode_int 0 }
    CONTROL_MODE_TUPLES[2] = { control_mode #JOINT_POSITION, control_mode_string[] "Joint Position Control", control_mode_int 1 }
    CONTROL_MODE_TUPLES[3] = { control_mode #CART_POSITION, control_mode_string[] "Cartesian Position Control", control_mode_int 5 }
    ; ENDFOLD

    ; FOLD Constants for mapping strings to ROS_CycleTime values and vice versa
    DECL CONST CycleTimeTuple CYCLE_TIME_TUPLES[3]
    CYCLE_TIME_TUPLES[1] = { cycle_time #NONE_CYCLE_TIME, cycle_time_string[] "UNSPECIFIED", cycle_time_int 0 }
    CYCLE_TIME_TUPLES[2] = { cycle_time #RSI_4MS, cycle_time_string[] "RSI_4MS", cycle_time_int 1 }
    CYCLE_TIME_TUPLES[3] = { cycle_time #RSI_12MS, cycle_time_string[] "RSI_12MS", cycle_time_int 2 }
    ; ENDFOLD

    ; FOLD Constants for mapping driver states to strings and vice versa
    DECL CONST DriverStateTuple DRIVER_STATE_TUPLES[3]
    DRIVER_STATE_TUPLES[1] = { driver_state #INITIALIZED, driver_state_string[] "INITIALIZED" }
    DRIVER_STATE_TUPLES[2] = { driver_state #INACTIVE, driver_state_string[] "INACTIVE" }
    DRIVER_STATE_TUPLES[3] = { driver_state #ACTIVE, driver_state_string[] "ACTIVE" }
    ; ENDFOLD

    ; FOLD Constants for easier mapping of event types to integers
    DECL CONST EventType EVENT_TYPES[13]
    EVENT_TYPES[1] = #STARTED
    EVENT_TYPES[2] = #STOPPED
    EVENT_TYPES[3] = #CANCELLED
    EVENT_TYPES[4] = #RESET_OK
    EVENT_TYPES[5] = #ERROR
    EVENT_TYPES[6] = #CONNECTED
    EVENT_TYPES[7] = #SWITCH_OK
    EVENT_TYPES[8] = #INVALID
    EVENT_TYPES[9] = #NONE
    EVENT_TYPES[10] = #DRIVES_TURNED_ON
    EVENT_TYPES[11] = #DRIVES_TURNED_OFF
    EVENT_TYPES[12] = #CYCLE_TIME_CHANGED
    EVENT_TYPES[13] = #STATUS_UPDATED
    ; ENDFOLD

    ; FOLD Constants for mapping program configurations to programs to run
    CONST INT PROGRAM_CONFIG_COUNT = 2
    DECL CONST ProgramConfiguration PROGRAM_CONFIGS[2]
    PROGRAM_CONFIGS[1] = { control_mode #JOINT_POSITION, cycle_time #RSI_4MS, program[] "R1/rsi_joint_pos_4ms()" }
    PROGRAM_CONFIGS[2] = { control_mode #JOINT_POSITION, cycle_time #RSI_12MS, program[] "R1/rsi_joint_pos_12ms()" }
    ; ENDFOLD
ENDDAT
