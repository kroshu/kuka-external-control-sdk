// Copyright 2023 KUKA Deutschland GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package kuka.ecs.v1;

import "proto-api/motion-services-ecs/qos_profile_settings.proto";
import "proto-api/motion-external/external_control_mode.proto";

option csharp_namespace = "Kuka.Ecs.V1";
option go_package = "golang.rd.kuka.com/motion-api/proto/kuka/ecs/v1";
option java_multiple_files = true;
option java_outer_classname = "ExternalControlServiceProto";
option java_package = "com.kuka.ecs.v1";


// External control gRPC Service
service ExternalControlService {
  // Start external control
  rpc OpenControlChannel(OpenControlChannelRequest) returns (OpenControlChannelResponse);
  // Observe external control state
  rpc ObserveControlState(ObserveControlStateRequest) returns (stream CommandState);
  // Start External motinoring
  rpc StartMonitoring(StartMonitoringRequest) returns (StartMonitoringResponse);
  // Stop External monitoring
  rpc StopMonitoring(StopMonitoringRequest) returns (StopMonitoringResponse);
  // Set values for the used QoS profiles
  rpc SetQoSProfile(SetQoSProfileRequest) returns (SetQoSProfileResponse);
}

// Start control request message
message OpenControlChannelRequest
{
  // Timeout for kExecuting state
  uint32 timeout = 1;
  // External control cycle time
  uint32 cycle_time = 2;
  // External control mode
  kuka.motion.external.ExternalControlMode external_control_mode = 3;
  // Velocity threshold for damping in case of impedance control modes
  repeated double velocity_threshold = 4;
  // Client IP address
  string ip_address = 5;
  // Variable defining whether secure communication is used
  bool is_secure = 6;
}

// Start control response
message OpenControlChannelResponse {
  // Empty
}
// Start Monitoring Request
message StartMonitoringRequest {
  // Empty
}
// Start Monitoring Response
message StartMonitoringResponse {
  // Empty
}
// Stop Monitoring Request
message StopMonitoringRequest {
  // Empty
}
// Stop Monitoring Response
message StopMonitoringResponse {
  // Empty
}
// Set QoS Profile Request
message SetQoSProfileRequest {
  // List of QoSProfiles to include
  repeated QoSProfile qos_profiles = 1;
}
// Set QoS Profile Response
message SetQoSProfileResponse {
  // Empty
}
// Observe Control StateRequest
message ObserveControlStateRequest {
  // Empty
}
// Command State for external client
message CommandState
{
  // Command event
  CommandEvent event = 1;
  // Error message
  string message = 2;
}

// Command Event
enum CommandEvent
{
  CONTROL_EVENT_UNSPECIFIED = 0;
  // Idle
  IDLE = 1;
  // Preparation finishes for motion command
  // (= MotionCommand ExtendedStateValue transitions to kReady)
  COMMAND_READY = 2;
  // Sampler starts sampling
  // (= MotionCommand ExtendedStateValue transitions to kExecuting)
  SAMPLING = 3;
  // Motion command execution finishes successfully
  // (= MotionCommand ExtendedStateValue transitions to kSamplingFinished)
  STOPPED = 4;
  // Control mode switch in progress
  CONTROL_MODE_SWITCH = 5;
  // Error occurs during external control, possible reasons:
  //   - motion command is rejected or recalled
  //   - motion command preparation fails
  //   - unhandled error during execution (ExtendedStateValue = kExecutionFailed)
  //   - cancelAll() is called for session
  //   - session is suspended or terminated
  //   - connection quality drops below the used QoS profile specification
  ERROR = 6;
}
